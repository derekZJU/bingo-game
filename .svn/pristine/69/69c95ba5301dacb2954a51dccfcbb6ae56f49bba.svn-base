package dw35_wz23.server.game.view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

import map.MapPanel;
import dw35_wz23.client.controller.ClientController;
import dw35_wz23.server.chatroom.view.IChatView2ModelAdapter;

import javax.swing.JTable;

import java.awt.GridLayout;

public class GameView extends JFrame implements Serializable{
	private static final long serialVersionUID = 3335681412100562629L;
	public JPanel contentPanel;
	public DefaultListModel<String> memberListModel;
	private JButton LeaveChatroomButton;
	private JLabel lblChatRoom;
	transient private IChatView2ModelAdapter chatModel;
//	private JPanel centerPanel;
	private MapPanel mapPanel = new MapPanel();
	private JTable table;
	/**
	 * constructor of the view
	 * @param iChatView2ModelAdapter	adapter from view to model
	 */
	public GameView() {	
		init();
	}
	/**
	 * initial operations when starting the mini GUI
	 */
	public void init(){
		setBounds(100, 100, 1600, 460);
		contentPanel = new JPanel();
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPanel.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPanel);
		contentPanel.setLayout(new BorderLayout(0, 0));	
		
		/*East*/
		JPanel cluePanel = new JPanel();		
		cluePanel.setLayout(new BorderLayout(0, 0));
		memberListModel = new DefaultListModel<String>();
		JLabel clueLabel = new JLabel("Clue Matrix");
		clueLabel.setHorizontalAlignment(SwingConstants.CENTER);
		cluePanel.add(clueLabel, BorderLayout.SOUTH);
		JPanel matrixPanel = new JPanel();
		cluePanel.add(matrixPanel, BorderLayout.CENTER);
		matrixPanel.setLayout(new GridLayout(8, 8, 2, 2));
		String[] stringArray = {
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck",
				"Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck","Pecking Duck"
		};
		ArrayList<JLabel> labelArray = new ArrayList<JLabel>();
		for(int i = 0; i<64; i++){
			JLabel newLabel = new JLabel(stringArray[i]);
			newLabel.setBorder(BorderFactory.createLineBorder(Color.RED));
			newLabel.setOpaque(true);
			newLabel.setBackground(Color.gray);
			labelArray.add(newLabel);
		}
		for(int i = 0; i < 64; i++){
			matrixPanel.add(labelArray.get(i));
		}
		
		/*North*/
		JPanel toolPanel = new JPanel();
		toolPanel.setLayout(new BorderLayout(0, 0));		
		lblChatRoom = new JLabel("Dish Bingo");
		lblChatRoom.setToolTipText("chatroom name");
		lblChatRoom.setHorizontalAlignment(SwingConstants.CENTER);
		toolPanel.add(lblChatRoom, BorderLayout.CENTER);		
		LeaveChatroomButton = new JButton("Leave Game");
		LeaveChatroomButton.setToolTipText("button for leaving chatroom");
		toolPanel.add(LeaveChatroomButton, BorderLayout.EAST);
		LeaveChatroomButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				chatModel.getChatroom().removeMember(chatModel.getMember());
				chatModel.sendLeaveMessage();
				ClientController.getInstance().getAppModel().removeChatroom(chatModel.getChatroom());
				ClientController.getInstance().getAppView().removeChatroom();
			}
		});
		
		/*Center*/
//		centerPanel = new JPanel();
//		centerPanel.add(mapPanel);
		
		contentPanel.add(toolPanel, BorderLayout.NORTH);
		contentPanel.add(cluePanel, BorderLayout.EAST);
		
//		table = new JTable(8,8){
//			public boolean isCellEditable(int row, int col){
//				return false;
//			}
//		};
//		table.setShowGrid(true);
//		table.setGridColor(Color.black);
//		table.setRowHeight(48);
//		for(int i = 0; i<8; i++)
//			table.getColumnModel().getColumn(i).setPreferredWidth(100);
//		memberListPanel.add(table, BorderLayout.CENTER);
		
		
		contentPanel.add(mapPanel, BorderLayout.CENTER);
		
	}
	/**
	 * starting operation of the view
	 */
	public void start() {
		mapPanel.start();
		System.out.println("map panel start");
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
			    setVisible(true);
			}	
		});
		//setVisible(true);
	}
}
